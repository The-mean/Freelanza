// Veri kaynağını tanımlama
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma istemcisini tanımlama
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// Kullanıcı türleri
enum UserRole {
  ADMIN
  FREELANCER
  CLIENT
}

// Kullanıcı statü türleri
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// Kullanıcı modeli
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  hashedPassword   String
  role             UserRole
  status           UserStatus        @default(PENDING_VERIFICATION)
  emailVerified    Boolean           @default(false)
  verificationCode String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  profile          Profile?
  clientProfile    ClientProfile?
  jobPostings      JobPosting[]      @relation("JobCreator")
  proposals        Proposal[]        @relation("ProposalCreator")
  receivedReviews  Review[]          @relation("ReviewTarget")
  givenReviews     Review[]          @relation("ReviewCreator")
  payments         Payment[]         @relation("PaymentCreator")
  receivedPayments Payment[]         @relation("PaymentReceiver")
  refreshTokens    RefreshToken[]
  notifications    Notification[]
}

// Kullanıcı profil modeli (Freelancer)
model Profile {
  id             String           @id @default(uuid())
  userId         String           @unique
  firstName      String
  lastName       String
  title          String?
  bio            String?          @db.Text
  hourlyRate     Decimal?         @db.Decimal(10, 2)
  avatar         String?
  location       String?
  phone          String?
  website        String?
  skills         Skill[]
  educations     Education[]
  experiences    Experience[]
  languages      Language[]
  portfolioItems PortfolioItem[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories     CategoryProfile[]
}

// Müşteri profil modeli
model ClientProfile {
  id           String  @id @default(uuid())
  userId       String  @unique
  companyName  String?
  contactName  String
  contactTitle String?
  description  String? @db.Text
  logo         String?
  location     String?
  website      String?
  industryId   String?
  industry     Industry? @relation(fields: [industryId], references: [id])
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Kategori modeli
model Category {
  id       String            @id @default(uuid())
  name     String            @unique
  icon     String?
  jobs     JobCategory[]
  profiles CategoryProfile[]
}

// Kategori-Profil ilişki modeli
model CategoryProfile {
  profileId  String
  categoryId String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([profileId, categoryId])
}

// Beceri modeli
model Skill {
  id       String        @id @default(uuid())
  name     String        @unique
  profiles Profile[]
  jobs     JobSkill[]
}

// Eğitim modeli
model Education {
  id          String   @id @default(uuid())
  profileId   String
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  description String?   @db.Text
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// İş deneyimi modeli
model Experience {
  id          String   @id @default(uuid())
  profileId   String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?   @db.Text
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Dil modeli
model Language {
  id        String      @id @default(uuid())
  profileId String
  name      String
  level     LanguageLevel
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, name])
}

// Dil seviyesi
enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

// Portföy öğesi modeli
model PortfolioItem {
  id          String   @id @default(uuid())
  profileId   String
  title       String
  description String?  @db.Text
  imageUrl    String?
  link        String?
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// İş ilanı modeli
model JobPosting {
  id           String        @id @default(uuid())
  creatorId    String
  title        String
  description  String        @db.Text
  budget       Decimal?      @db.Decimal(10, 2)
  budgetType   BudgetType
  deadline     DateTime?
  location     String?
  isRemote     Boolean       @default(true)
  experience   ExperienceLevel?
  status       JobStatus     @default(OPEN)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  creator      User          @relation("JobCreator", fields: [creatorId], references: [id])
  categories   JobCategory[]
  skills       JobSkill[]
  proposals    Proposal[]
  attachments  Attachment[]
  industryId   String?
  industry     Industry? @relation(fields: [industryId], references: [id])
}

// Endüstri/Sektör modeli
model Industry {
  id            String          @id @default(uuid())
  name          String          @unique
  jobPostings   JobPosting[]
  clientProfiles ClientProfile[]
}

// İş kategorisi ilişki modeli
model JobCategory {
  jobId      String
  categoryId String
  job        JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([jobId, categoryId])
}

// İş becerisi ilişki modeli
model JobSkill {
  jobId   String
  skillId String
  job     JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill   Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
}

// Bütçe türleri
enum BudgetType {
  FIXED
  HOURLY
}

// Deneyim seviyesi
enum ExperienceLevel {
  ENTRY
  INTERMEDIATE
  EXPERT
}

// İş durumu
enum JobStatus {
  OPEN
  ASSIGNED
  COMPLETED
  CANCELLED
}

// Dosya eki modeli
model Attachment {
  id        String     @id @default(uuid())
  jobId     String
  fileName  String
  fileType  String
  fileSize  Int
  fileUrl   String
  uploadedAt DateTime  @default(now())
  job       JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

// Teklif modeli
model Proposal {
  id           String         @id @default(uuid())
  jobId        String
  freelancerId String
  bid          Decimal        @db.Decimal(10, 2)
  coverLetter  String         @db.Text
  deliveryTime Int            @default(0) // Gün cinsinden
  status       ProposalStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  job          JobPosting     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer   User           @relation("ProposalCreator", fields: [freelancerId], references: [id])
  contract     Contract?
}

// Teklif durumu
enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// Sözleşme modeli
model Contract {
  id           String         @id @default(uuid())
  proposalId   String         @unique
  title        String
  description  String         @db.Text
  startDate    DateTime       @default(now())
  endDate      DateTime?
  totalAmount  Decimal        @db.Decimal(10, 2)
  status       ContractStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  proposal     Proposal       @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  milestones   Milestone[]
  payments     Payment[]
}

// Sözleşme durumu
enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

// Kilometre taşı modeli
model Milestone {
  id          String          @id @default(uuid())
  contractId  String
  title       String
  description String          @db.Text
  amount      Decimal         @db.Decimal(10, 2)
  dueDate     DateTime?
  status      MilestoneStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  contract    Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

// Kilometre taşı durumu
enum MilestoneStatus {
  PENDING
  ACTIVE
  COMPLETED
  REJECTED
}

// Ödeme modeli
model Payment {
  id            String        @id @default(uuid())
  contractId    String?
  payerId       String
  receiverId    String
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contract      Contract?     @relation(fields: [contractId], references: [id])
  payer         User          @relation("PaymentCreator", fields: [payerId], references: [id])
  receiver      User          @relation("PaymentReceiver", fields: [receiverId], references: [id])
}

// Ödeme yöntemi
enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  IYZICO
  PAYTR
}

// Ödeme durumu
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Yorum/Değerlendirme modeli
model Review {
  id           String  @id @default(uuid())
  creatorId    String  // Yorum yapan (Client veya Freelancer)
  targetId     String  // Yorum alan (Client veya Freelancer)
  rating       Int     @db.SmallInt
  comment      String? @db.Text
  contractId   String? // İsteğe bağlı - hangi iş için olduğunu belirtmek için
  createdAt    DateTime @default(now())
  creator      User     @relation("ReviewCreator", fields: [creatorId], references: [id])
  target       User     @relation("ReviewTarget", fields: [targetId], references: [id])
}

// Yenileme token modeli
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Bildirim modeli
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Bildirim türleri
enum NotificationType {
  JOB_PROPOSAL
  PROPOSAL_ACCEPTED
  PROPOSAL_REJECTED
  PAYMENT_RECEIVED
  CONTRACT_COMPLETED
  REVIEW_RECEIVED
  ACCOUNT_UPDATE
  SYSTEM_NOTIFICATION
} 